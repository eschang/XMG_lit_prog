#+TITLE: Literate XMG with Emacs Org-Mode
#+AUTHOR: Emmanuel Schang
#+DATE: 2018, July 3

* Motivation
Writing a meta-grammar may be cumbersome in several ways. As the code rapidly grows in length, the technical choices you're making become less and less obvious if you don't document your code. And sharing your code with other linguists implies sharing your theoretical views on the grammar you are describing. And if you are working on an intermittent basis on a meta-grammar, you probably don't remember the reasons of all your choices.

Literate programming is an answer to these problems. It aims at writing programs that are understandable to human beings. The logic of your program is described in plain text with macros and code snippets included. The documentation and the code are in a single document, but both can be exported separately:
- as a code file (containing nothing but the instructions to the computer),
- as a documentation file (a .pdf document edited with LaTeX for instance).

Emacs org-mode is a good tool for doing easy literate programming. Let's see how it works with XMG.  


* Setting Up your Emacs
** Installing xmg-mode

Timm Lichte wrote a nice major mode for xmg. It allows syntax highlighting, indentation and =imenu= support for xmg files.
The installation is described here:  
https://github.com/xmg-hhu/xmg-mode

** Allowing org-mode to recognize xmg code 
Org- mode files can recognize xmg code if you add the following lines in your .emacs file.

#+BEGIN_SRC elisp -n
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (xmg . nil)
   ))
#+END_SRC

Line 3 is not useful for xmg, but it shows you that this is the place where you list the languages you want to use with org-mode (here, python). If you don't use python, you can delete Line 3. And if you are already using python, you just have to add xmg (Line 4) to the list of the languages. 

* Working with org-mode
Org-mode has a lot of functions that you can find here:
https://orgmode.org/manual/

Here, I will describe how to deal with xmg only. I suppose that you already know how to export your org files in LaTeX, odt, html, etc. If it is not the case, read the documentation here:
 https://orgmode.org/manual/Exporting.html#Exporting

** xmg snippets

If you press =<s TAB=, org mode opens a code block:


=#+BEGIN_SRC=


 
=#+END_SRC=

You can specify on the tag the language you are using (here xmg) :
=#+BEGIN_SRC xmg=

And this will allow you to work with the syntax highlighting of xmg-mode.

For instance :

- A first block for the principles.
#+BEGIN_SRC elisp -i 
,#+CAPTION: Principles
 ,#+BEGIN_SRC xmg  
type MARK = {subst, subst, nadj, foot, anchor, coanchor, flex }
type NAME = {SubjNode, ObjNode, Anchor}
type CAT = {n,v,s}
type GF = {subj, obj}
type lexicon = {manger}
,#+END_SRC
#+END_SRC
- and a second block for some other piece of code:
#+BEGIN_SRC elisp
#+CAPTION: Active Class
,#+BEGIN_SRC xmg 
class Active
export ?X ?Y
declare ?X ?Y
{<syn>{
        ?X -> ?Y
        }
}
,#+END_SRC
#+END_SRC

You can export the code using the export dispatcher C-c C-e and select the format: LaTex, html, etc.


** Code tangling
Now let's extract the code in a single .xmg file. In the literate programming vocabulary, extracting the code is called 'tangling' (as opposed to 'weaving').
 
 This is described here:
https://orgmode.org/manual/Extracting-source-code.html

The simplest way to do this is to add the suffix =:tangle yes= to the header arguments, as shown below:
#+BEGIN_SRC elisp -i 
,#+CAPTION: Principles
 ,#+BEGIN_SRC xmg -n :tangle yes
type MARK = {subst, subst, nadj, foot, anchor, coanchor, flex }
type NAME = {SubjNode, ObjNode, Anchor}
type CAT = {n,v,s}
type GF = {subj, obj}
type lexicon = {manger}
,#+END_SRC
#+END_SRC

and

#+BEGIN_SRC elisp
#+CAPTION: Active Class
,#+BEGIN_SRC xmg :tangle yes
class Active
export ?X ?Y
declare ?X ?Y
{<syn>{
        ?X -> ?Y
        }
}
,#+END_SRC
#+END_SRC

Now, if you prompt  C-c C-v f or  C-c C-v t,  the code is extracted to a .xmg file.
The code in the .xmg file is:
#+BEGIN_SRC 
type MARK = {subst, subst, nadj, foot, anchor, coanchor, flex }
type NAME = {SubjNode, ObjNode, Anchor}
type CAT = {n,v,s}
type GF = {subj, obj}
type lexicon = {manger}
class Active
export ?X ?Y
declare ?X ?Y
{<syn>{
        ?X -> ?Y
        }
}


#+END_SRC


There are several other ways to perform this task, I have just described the (in my opinion) simplest one.

Note that the xmg code is not evaluated. You will have to compile it on your machine (if you have the xmg compiler installed) or on the website http://xmg.phil.hhu.de/.
If you prompt C-c C-c in a xmg code block, you'll get the message =org-babel-execute-src-block: No org-babel-execute function for xmg!=. This is normal since org-babel doesn't recognize xmg (yet).


* Acknowledgements: 
:PROPERTIES:
:UNNUMBERED: t
:END:
I'd like to thank Simon Petitjean and Yannick Parmentier for their comments on this work. Yannick Parmentier developed a method for literate XMGing with /lit/ which inspired this work. 
